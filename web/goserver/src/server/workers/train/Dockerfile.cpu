############################
# STEP 1 build executable binary
############################
FROM golang:alpine AS builder

# Install git + SSL ca certificates.
# Git is required for fetching the dependencies.
# Ca-certificates is required to call HTTPS endpoints.
RUN apk update && apk add --no-cache git ca-certificates && update-ca-certificates

WORKDIR /go/src/server

# Fetch dependencies.
COPY web/goserver/src/server/go.mod .
COPY web/goserver/src/server/go.sum .
RUN go mod download

COPY web/goserver/src/server .
# Build the binary.
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o /go/bin/workers/train /go/src/server/workers/train/cmd

############################
# STEP 2 build PyTorch
############################
FROM ubuntu:18.04

RUN apt-get update && apt-get install -y --no-install-recommends \
         build-essential \
         git \
         curl \
         ca-certificates \
         libjpeg-dev \
         libpng-dev \
         libglib2.0-0 \
         libsm6 \
         libxrender-dev \
         libxext6 \
         cmake \
         gcc \
         protobuf-compiler \
         libgtk2.0-dev \
         python3.7-dev \
         python3-setuptools && \
     rm -rf /var/lib/apt/lists/*

# Install pip for python3.7
RUN ln -sfn /usr/bin/python3.7 /usr/bin/python && \
    ln -sfn /usr/bin/python3.7 /usr/bin/python3 && \
    curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && \
    python3.7 get-pip.py && \
    rm get-pip.py

# Install PyTorch
RUN pip install torch==1.4.0+cpu torchvision==0.5.0+cpu -f https://download.pytorch.org/whl/torch_stable.html

COPY ./pytorch_toolkit/object_detection/requirements.txt /tmp/ote/pytorch_toolkit/object_detection/requirements.txt
COPY ./external/mmdetection/requirements.txt /tmp/ote/external/mmdetection/requirements.txt
COPY ./external/mmdetection/requirements /tmp/ote/external/mmdetection/requirements
WORKDIR /tmp/ote/pytorch_toolkit/object_detection
ENV FORCE_CUDA="0"
RUN pip install cython
RUN cat requirements.txt | xargs -n 1 -L 1 pip install
RUN pip install "git+https://github.com/open-mmlab/cocoapi.git#subdirectory=pycocotools"

# Install OpenVINO
RUN apt update && \
    apt install -y \
        libgtk-3-dev \
        cpio \
        unzip \
        wget && \
     rm -rf /var/lib/apt/lists/*

ARG OPENVINO_LINK=http://registrationcenter-download.intel.com/akdlm/irc_nas/16803/l_openvino_toolkit_p_2020.4.287.tgz
RUN mkdir -p /tmp/openvino_installer && cd /tmp/openvino_installer && \
    wget --no-verbose $OPENVINO_LINK && \
    tar xf l_openvino_toolkit*.tgz && \
    rm l_openvino_toolkit*.tgz && \
    cd l_openvino_toolkit* && \
    bash ./install.sh -s silent.cfg --accept_eula && \
    cd /opt/intel/openvino/install_dependencies/ && \
    dpkg -i intel-*.deb && \
    ldconfig && \
    rm -rf /tmp/openvino_installer && \
    pip install -r /opt/intel/openvino/deployment_tools/model_optimizer/requirements_onnx.txt && \
    echo "source /opt/intel/openvino/bin/setupvars.sh" >> /etc/profile

# Prepare workspace to use for any user
ENV BASH_ENV "/etc/profile"
ENV USER docker
RUN mkdir -m 777 /workspace
ENV HOME /workspace
WORKDIR /workspace

# Install Golang

# gcc for cgo
RUN apt-get update && apt-get install -y --no-install-recommends \
		g++ \
		gcc \
		libc6-dev \
		make \
		pkg-config \
	&& rm -rf /var/lib/apt/lists/*

# Copy our static executable.
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/
COPY --from=builder /go/bin/workers/train /go/bin/workers/train

ENTRYPOINT rm -rf /ote/external/mmdetection/build && \
           cd /ote/external/mmdetection && \
           python setup.py develop && \
           /go/bin/workers/train
